// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/TimeWtr/TurboStream/core (interfaces: EvictPolicy)
//
// Generated by this command:
//
//	mockgen -destination=./mocks/queue/evictpolicy_mock.go -package queue_mocks github.com/TimeWtr/TurboStream/core EvictPolicy
//

// Package queue_mocks is a generated GoMock package.
package queue_mocks

import (
	reflect "reflect"

	component "github.com/TimeWtr/TurboStream/core/component"
	gomock "go.uber.org/mock/gomock"
)

// MockEvictPolicy is a mock of EvictPolicy interface.
type MockEvictPolicy struct {
	ctrl     *gomock.Controller
	recorder *MockEvictPolicyMockRecorder
	isgomock struct{}
}

// MockEvictPolicyMockRecorder is the mock recorder for MockEvictPolicy.
type MockEvictPolicyMockRecorder struct {
	mock *MockEvictPolicy
}

// NewMockEvictPolicy creates a new mock instance.
func NewMockEvictPolicy(ctrl *gomock.Controller) *MockEvictPolicy {
	mock := &MockEvictPolicy{ctrl: ctrl}
	mock.recorder = &MockEvictPolicyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEvictPolicy) EXPECT() *MockEvictPolicyMockRecorder {
	return m.recorder
}

// Evict mocks base method.
func (m *MockEvictPolicy) Evict() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Evict")
	ret0, _ := ret[0].(int)
	return ret0
}

// Evict indicates an expected call of Evict.
func (mr *MockEvictPolicyMockRecorder) Evict() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Evict", reflect.TypeOf((*MockEvictPolicy)(nil).Evict))
}

// Metrics mocks base method.
func (m *MockEvictPolicy) Metrics() map[string]float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Metrics")
	ret0, _ := ret[0].(map[string]float64)
	return ret0
}

// Metrics indicates an expected call of Metrics.
func (mr *MockEvictPolicyMockRecorder) Metrics() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Metrics", reflect.TypeOf((*MockEvictPolicy)(nil).Metrics))
}

// Name mocks base method.
func (m *MockEvictPolicy) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockEvictPolicyMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockEvictPolicy)(nil).Name))
}

// ShouldEvict mocks base method.
func (m *MockEvictPolicy) ShouldEvict(ctx *component.EvictContext) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShouldEvict", ctx)
	ret0, _ := ret[0].(bool)
	return ret0
}

// ShouldEvict indicates an expected call of ShouldEvict.
func (mr *MockEvictPolicyMockRecorder) ShouldEvict(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShouldEvict", reflect.TypeOf((*MockEvictPolicy)(nil).ShouldEvict), ctx)
}
