// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/TimeWtr/TurboStream/core (interfaces: BufferQueueManager)
//
// Generated by this command:
//
//	mockgen -destination=./mocks/queue/bufferqueuemanager_mock.go -package queue_mocks github.com/TimeWtr/TurboStream/core BufferQueueManager
//

// Package queue_mocks is a generated GoMock package.
package queue_mocks

import (
	reflect "reflect"

	component "github.com/TimeWtr/TurboStream/core/component"
	gomock "go.uber.org/mock/gomock"
)

// MockBufferQueueManager is a mock of BufferQueueManager interface.
type MockBufferQueueManager struct {
	ctrl     *gomock.Controller
	recorder *MockBufferQueueManagerMockRecorder
	isgomock struct{}
}

// MockBufferQueueManagerMockRecorder is the mock recorder for MockBufferQueueManager.
type MockBufferQueueManagerMockRecorder struct {
	mock *MockBufferQueueManager
}

// NewMockBufferQueueManager creates a new mock instance.
func NewMockBufferQueueManager(ctrl *gomock.Controller) *MockBufferQueueManager {
	mock := &MockBufferQueueManager{ctrl: ctrl}
	mock.recorder = &MockBufferQueueManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBufferQueueManager) EXPECT() *MockBufferQueueManagerMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockBufferQueueManager) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockBufferQueueManagerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockBufferQueueManager)(nil).Close))
}

// Pick mocks base method.
func (m *MockBufferQueueManager) Pick() (*component.QueueItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pick")
	ret0, _ := ret[0].(*component.QueueItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Pick indicates an expected call of Pick.
func (mr *MockBufferQueueManagerMockRecorder) Pick() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pick", reflect.TypeOf((*MockBufferQueueManager)(nil).Pick))
}

// Push mocks base method.
func (m *MockBufferQueueManager) Push(s *component.QueueItem) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Push", s)
	ret0, _ := ret[0].(error)
	return ret0
}

// Push indicates an expected call of Push.
func (mr *MockBufferQueueManagerMockRecorder) Push(s any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Push", reflect.TypeOf((*MockBufferQueueManager)(nil).Push), s)
}

// Reset mocks base method.
func (m *MockBufferQueueManager) Reset() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Reset")
}

// Reset indicates an expected call of Reset.
func (mr *MockBufferQueueManagerMockRecorder) Reset() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reset", reflect.TypeOf((*MockBufferQueueManager)(nil).Reset))
}

// SetEvictPolicy mocks base method.
func (m *MockBufferQueueManager) SetEvictPolicy(ep MockEvictPolicy) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetEvictPolicy", ep)
}

// SetEvictPolicy indicates an expected call of SetEvictPolicy.
func (mr *MockBufferQueueManagerMockRecorder) SetEvictPolicy(ep any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetEvictPolicy", reflect.TypeOf((*MockBufferQueueManager)(nil).SetEvictPolicy), ep)
}
